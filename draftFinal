let asteroids=[]
let peluru=[]
let musuhImg;
let stage=1
function preload(){
  musuhImg=loadImage("R.png")
}

function setup() {
  createCanvas(400,400)
  map1=new Mapp(0,0)
  player= new Hero(20, 200, 360,color(700,0,0),10);
  musuh= new Monster(mouseX,350,height,1,1);
  musuh.setup()
  level = new Level();
  level.setLevel(1);
  
}

function draw() {
  background(0);
  player.show();
  player.move()
  rectMode(CENTER)
  player.showPeluru()
  musuh.show()
  player.kena()
  musuh.addMusuh();
  
  text ("Lvl " + level.getCurentLevel(), 15, 15);
  text ("Score " + player.getsaveScore(), 15, 27);
  
  if(level.getCurentLevel()==player.getsaveScore()/20 &&player.getsaveScore()!=0){
  level.currentLevel+=1
  }
}
function keyPressed(){
  //space
  if(keyCode==32&&stage==1){
    player.attack()
    //reload game if gameover
  }else if(keyCode==RETURN&&stage==2){
    map1.init()
  }
}

//segala class
class entity{
  constructor(x,y,h,w,speed){
    this.x=x
    this.y=y
    this.h=h
    this.w=w
    this.kecepatan=speed
  }
  //selama attack di panggil akan menambah peluru hero ke stack
  attack(){
    let p={
      x:this.x,
      y:this.y
    }
    peluru.push(p)
  }
  //cek left arrow jika di press hero bergerak ke kiri
 move(){
    if(keyIsDown(LEFT_ARROW)&&stage==1){
      if(this.x>0){
        this.x-=2;
      }
    }
    if(keyIsDown(RIGHT_ARROW)&&stage==1){
        if(this.x<390){
          this.x+=2
        }
    }
    if(keyIsDown(UP_ARROW)&&stage==1){
      if(this.y>0){
        this.y-=2
      }
    }
    if(keyIsDown(DOWN_ARROW)&&stage==1){
      if(this.y<390){
      this.y+=2
      }
    }
  }
}

class Hero extends entity{
  constructor(ukuran, x, y, warna, speed) {
    super(x, y,0,0,speed);
    this.warna=warna;
    this.kecepatan=speed;
    this.ukuran=ukuran;
    this.life = 100;
    this.score = 0;
    this.recordScore=0
  }
  
  show(){
     background(100,27,900);
     fill(this.warna);
     circle(this.x, this.y, this.ukuran);
  }

  increaseScore(){
  this.score+=1
  }
  calculateLife(){
    this.life = 100;
  }

  setsaveScore(score){
    this.score = score;
  }
  getsaveScore(){
    return this.score;
  }
  
  showPeluru(){
     fill(0);
     noStroke()
     for (let bullet of peluru){
       circle(bullet.x,bullet.y,5)
       bullet.y -= this.kecepatan;
       
     }
  }
  
  kena(){
    for(let asteroid of asteroids){
      for(let bullet of peluru){
        if(dist (asteroid.x,asteroid.y,bullet.x,bullet.y)<40){
          asteroids.splice(asteroids.indexOf(asteroid),1)
          peluru.splice(peluru.indexOf(bullet),1)
          this.score+=1
        }
      }
    }
  }

}


class Monster extends entity{
  //asteroidnya
  constructor(x, y, w, h,speed) {
    super(x, y, w, h,speed);
    this.life=100
    this.effect+=3
    this.type=0

  }

  setup(){
    for(let i =0;i<random(1,10);i++){
    let asteroid={
      x:random(10,width-40),
      y:random(-400,0)
    }
     asteroids.push(asteroid)  
    }
  }
  
  addMusuh(){
    if(asteroids.length<=0){
      this.setup()
    }
  }

show(){
  fill(0);
  noStroke()
  for(let asteroid of asteroids){
    image(musuhImg,asteroid.x,asteroid.y,40,40) 
    asteroid.y += this.kecepatan
    if(asteroid.y>height){
      if(player.recordScore<player.score){
        player.recordScore=player.score  
      }
      color(255,255,255)
      text("You lose!",height-225,width/2)
      text("Record ",height-235,width-225)
      text(player.recordScore,height-175,width-225)
      this.kecepatan=0
      player.kecepatan=0
      stage=2
    }
  }
}
}
class Mapp{
  constructor(w,h){
    this.width= w;
    this.height= h;
  }
  init(){
     for(let i=0;i<10;i++){
       asteroids.pop()
       peluru.pop()
     }
    level.currentLevel = 1;
    player.score=0
    player.x=200
    player.y=370
    musuh.kecepatan=1
    player.kecepatan=10
    stage=1
  }
}

class Level extends Hero{
  constructor() {
    super();
    //this.score = score;
    this.currentLevel = 0;
    this.latestLevel = 0;
    this.maxLevel = 0;
  }
  setLevel(level){
    this.currentLevel = level;
  } 
  getCurentLevel(){
    return this.currentLevel;
  }
}
